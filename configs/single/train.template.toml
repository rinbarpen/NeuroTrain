output_dir = "./output"
task = "Test"
entity = "Lab"
run_id = "" # be Random set by program
device = "cuda"
seed = -1
classes = ["Retina"]
metrics = ['iou', 'accuracy', 'precision', 'recall', 'f1', 'dice']
postprocess = "binary_segmentation" # binary_segmentation, instance_segmentation, ...

[model]
name = "unet"
continue_checkpoint = "" # use this if encountering crash while training
continue_ext_checkpoint = "" # use this if encountering crash while training
pretrained = ""

[model.config]
n_channels = 1
n_classes = 1

[transform]
# (RESIZE, resize)
# (ROTATION, degree)
# (HFLIP, p)
# (VFLOP, p)
# (INVERT, p)
# (TO_TENSOR)
# (PIL_TO_TENSOR)
# (NORMALIZE, is_rgb)
RESIZE=[512, 512]
# ROTATION=[10]
# HFLIP=[0.1]
# VFLIP=[0.1]
# INVERT=[0.1]
PIL_TO_TENSOR=[]
CONVERT_IMAGE_DTYPE=['float32']
# TO_TENSOR=[]

[dataset]
name = "DRIVE"
base_dir = "./data/DRIVE"
betweens = {train = [0.0, 1.0], valid = [0.0, 1.0], test = [0.0, 1.0]}
config = {}
# scan from configs/dataset by default. if lacked, retry to scan from the default.yaml. None means directly to scan from the default.yaml
# ref = amos2022.yaml 

# [dataset]
# name = "STARE"
# base_dir = "./data/STARE"
# betweens = {train = [0.0, 1.0], valid = [0.0, 1.0], test = [0.0, 1.0]}

# [dataset]
# name = "CHASEDB1"
# base_dir = "./data/CHASEDB1"
# betweens = {train = [0.0, 1.0], valid = [0.0, 1.0], test = [0.0, 1.0]}

[dataloader]
num_workers = 4
shuffle = true

[train]
batch_size = 2
epoch = 200
save_period = 0.2
grad_accumulation_steps = 0 # <= 0 for disabled

[train.optimizer]
type = 'adam' # sgd, adam, adamw
learning_rate = 3e-5
weight_decay = 1e-8

# [train.lr_scheduler]
# type = 'step'
# warmup = 50
# warmup_lr = 0.03

# [train.scaler]
# compute_type = 'float16'

# [train.early_stopping]
# patience = 3

[test]
batch_size = 1

[predict]
input = "data/DRIVE/test/images"

[predict.config]

[private]
wandb = false
mode = 0

[private.log]
verbose = false # info mode
debug = false # debug mode
log_file_format = '%Y-%m-%d %H_%M_%S'
log_format = '%(asctime)s %(levelname)s | %(name)s | %(message)s'
